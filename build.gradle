ext {
    drivers = ["chrome"]
    ext {
        seleniumVersion = '3.4.0'
        chromeDriverVersion = '2.19'
//        phantomJsVersion = '1.9.7'
        jsoupVersion = '1.10.2'
    }
}

apply plugin: 'maven'
apply plugin: 'java'

group = 'com.ksh'
version = '1.2.0'

repositories {
    mavenCentral()
}

//Project dependencies
dependencies {
    compile 'org.slf4j:slf4j-api:1.7.21'
    //compile 'org.slf4j:slf4j-simple:1.7.18'
    compile 'ch.qos.logback:logback-classic:1.1.7'
    compile "org.jsoup:jsoup:$jsoupVersion"
    compile "org.seleniumhq.selenium:selenium-java:$seleniumVersion"
//    compile "org.seleniumhq.selenium:selenium-support:$seleniumVersion"
	//compile 'org.jboss.shrinkwrap.resolver:shrinkwrap-resolver-depchain:2.2.2'

    compile "org.seleniumhq.selenium:selenium-chrome-driver:$seleniumVersion"
    //compile "org.seleniumhq.selenium:selenium-htmlunit-driver:$seleniumVersion"
//    compile 'org.seleniumhq.selenium:htmlunit-driver:2.21'

    //compile 'com.github.detro.ghostdriver:phantomjsdriver:1.2.0'
//    compile 'com.codeborne:phantomjsdriver:1.3.0'

    //compile "org.jboss.arquillian.extension:arquillian-phantom-driver:1.2.1.Final"
    //compile 'com.machinepublishers:jbrowserdriver:0.10.1'

//    runtime "org.seleniumhq.selenium:selenium-remote-driver:$seleniumVersion"

    //testCompile "org.seleniumhq.selenium:selenium-firefox-driver:$seleniumVersion"
    // using a custom version of phantomjs driver for now as the original one does not support WebDriver > 2.43.1
//    compile("com.codeborne:phantomjsdriver:1.2.1") {
//        // phantomjs driver pulls in a different selenium version
//        transitive = false
//    }

}

jar {
    baseName = 'webworker'
    manifest {
        attributes 'Implementation-Title': 'WebWorker',
        'Implementation-Version': version,
        'Built-By': System.getProperty('user.name'),
        'Built-Date': new Date(),
        'Built-JDK': System.getProperty('java.version')
    }
}

task sourcesJar (type: Jar) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

artifacts { archives sourcesJar, jar }

//create a single Jar with all dependencies
task fatJar(type: Jar) {
    baseName = project.name + '-all'
    from { configurations.runtime.collect { it.isDirectory() ? it : zipTree(it) } }
    with jar
}
